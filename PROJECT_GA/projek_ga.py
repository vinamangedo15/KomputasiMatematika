# -*- coding: utf-8 -*-
"""PROJEK_GA

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SBjm26YZK8WNTbAVaKT4V7KiNSP2CCjE
"""

#Memuat Data
from google.colab import files
uploaded = files.upload()

# Kolom skala Likert yang digunakan sebagai kromosom
likert_cols = [
    "Saya merasa matematika sulit dipahami",
    "Penyampaian materi Matematika di kelas terasa kurang sesuai dengan cara saya belajar",
    "Nilai matematika saya sering di bawah KKM",
    "Teman-teman saya juga kurang menyukai matematika",
    "Saya lebih suka pelajaran yang tidak banyak berhitung",
    "Saya merasa jurusan matematika prospek kerjanya sedikit"
]

# Ambil data dan ubah ke bentuk kromosom
chromosomes = df[likert_cols].dropna().astype(int).values

# Lihat kromosom
for i, chrom in enumerate(chromosomes[:60]):
    print(f"Kromosom {i+1}: {chrom}")

import numpy as np

def fitness_function(chromosome):
    return np.sum(chromosome)

# Hitung skor fitness
fitness_scores = np.array([fitness_function(c) for c in chromosomes])

# Lihat 5 fitness pertama
for i, score in enumerate(fitness_scores[:60]):
    print(f"Fitness Kromosom {i+1}: {score}")

# Pilih 50% populasi terbaik sebagai orang tua
num_parents = len(chromosomes) // 2
top_indices = np.argsort(fitness_scores)[-num_parents:]
parents = chromosomes[top_indices]

# Lihat orang tua terpilih
print("Orang tua terbaik:")
for parent in parents:
    print(parent)

import random

def crossover(parent1, parent2):
    point = random.randint(1, len(parent1) - 1)
    return np.concatenate((parent1[:point], parent2[point:]))

def mutate(chromosome, rate=0.1):
    if random.random() < rate:
        idx = random.randint(0, len(chromosome) - 1)
        chromosome[idx] = random.randint(1, 5)
    return chromosome

print("Seluruh Anak dari Crossover + Mutasi:")
for i, child in enumerate(children):
    print(f"Anak #{i+1}: {child}")

for generation in range(num_generations):
    ...
    print(f"\nGenerasi {generation+1}")
    for i, child in enumerate(children[:5]):  # atau ganti dengan children
        print(f"Anak #{i+1}: {child}")

# Parameter
num_generations = 100
mutation_rate = 0.1
num_children = len(chromosomes) - num_parents
current_population = chromosomes.copy()

for generation in range(num_generations):
    fitness_scores = np.array([fitness_function(ind) for ind in current_population])
    parents = current_population[np.argsort(fitness_scores)[-num_parents:]]

    # Proses crossover dan mutasi
    children = []
    while len(children) < num_children:
        p1, p2 = random.sample(list(parents), 2)
        child = crossover(p1, p2)
        child = mutate(child, mutation_rate)
        children.append(child)

    # Bentuk generasi baru
for i, child in enumerate(children[:100]):
    print(f"Anak #{i+1}: {child}")
    current_population = np.vstack((parents, children))

# Evaluasi akhir
final_fitness_scores = np.array([fitness_function(ind) for ind in current_population])
top_final_indices = np.argsort(final_fitness_scores)[-5:][::-1]

print("5 Kromosom Terbaik Setelah Evolusi:")
for i, idx in enumerate(top_final_indices):
    print(f"Kromosom #{i+1}: {current_population[idx]} | Skor: {final_fitness_scores[idx]}")

import matplotlib.pyplot as plt

# Ambil 5 kromosom terbaik setelah evolusi
top_chromosomes = current_population[top_final_indices]

# Hitung rata-rata skor per pertanyaan (faktor)
avg_per_faktor = np.mean(top_chromosomes, axis=0)

# Label pertanyaan (sesuai urutan kromosom)
faktor_labels = [
    "Matematika sulit",
    "Penyampaian tidak cocok",
    "Nilai di bawah KKM",
    "Teman tidak suka",
    "Tidak suka berhitung",
    "Prospek kerja rendah"
]

# Pie Chart
plt.figure(figsize=(6, 6))
plt.pie(avg_per_faktor, labels=faktor_labels, autopct='%1.1f%%', startangle=140)
plt.title("Distribusi Alasan Dominan Ketidaktertarikan terhadap Matematika (Top 5 Kromosom)")
plt.show()

# Bar Chart
plt.figure(figsize=(10, 5))
bars = plt.bar(faktor_labels, avg_per_faktor, color='skyblue')
plt.title("Rata-rata Skor per Faktor (Top 5 Individu)")
plt.ylabel("Rata-rata Skor (1–5)")
plt.ylim(0, 5)

# Tambahkan label di atas bar
for bar in bars:
    height = bar.get_height()
    plt.text(bar.get_x() + bar.get_width() / 2, height + 0.1, f'{height:.2f}', ha='center', va='bottom')

plt.xticks(rotation=30)
plt.tight_layout()
plt.show()